import { SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate';
import {
  DirectSecp256k1HdWallet,
  DirectSecp256k1Wallet,
} from '@cosmjs/proto-signing';
import { GasPrice } from '@cosmjs/stargate';
import { keccak_256 } from '@noble/hashes/sha3';
import { getCosmWasmClient } from '@sei-js/core';

import { providerParams } from '../types/types';

export class Provider {
    private rpc: string
    private gasPrice: string
    private mnemonic: string
    private merkleProof: number[] | null
    
    public client: any
    public userAddress?: string 
    public hashedAddress?: number[]
    
    static async Connect({ rpc, gasPrice, mnemonic }: providerParams): Promise<Provider> {
        return await (new Provider({ rpc, gasPrice, mnemonic })).connect()
    }

    constructor({ rpc, gasPrice, mnemonic }: providerParams) {
        this.rpc = rpc
        this.gasPrice = gasPrice
        this.mnemonic = mnemonic
        this.merkleProof = null
    }

    async connect(): Promise<Provider> {
        if (!this.mnemonic && !this.gasPrice) {
            this.client = await getCosmWasmClient(this.rpc)
            return this
        }

        const isMnemonic = this.mnemonic.split(" ").length > 2

        let wallet
        if (isMnemonic) {
            wallet = await DirectSecp256k1HdWallet.fromMnemonic(this.mnemonic, { prefix: "sei" })

            this.userAddress = (await wallet.getAccounts())[0].address
        } else {
            wallet = await DirectSecp256k1Wallet.fromKey(Buffer.from(this.mnemonic.slice(2), 'hex'), "sei")

            this.userAddress = (await wallet.getAccounts())[0].address
        }

        this.client = await SigningCosmWasmClient.connectWithSigner(this.rpc, wallet, {
            gasPrice: GasPrice.fromString(this.gasPrice)
        })

        this.client.broadcastTimeoutMs = 3000
        this.client.broadcastPollIntervalMs

        this.hashedAddress = Array.from(Buffer.from(keccak_256(this.userAddress)))

        return this
    }
}